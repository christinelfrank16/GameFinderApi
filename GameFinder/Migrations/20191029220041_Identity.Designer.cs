// <auto-generated />
using System;
using GameFinder.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameFinder.Migrations
{
    [DbContext(typeof(GameFinderContext))]
    [Migration("20191029220041_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GameFinder.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvgPlayTime");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MinAge");

                    b.Property<int>("MinPlayers");

                    b.Property<string>("Name");

                    b.Property<string>("Publisher");

                    b.Property<string>("Type");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            AvgPlayTime = 50,
                            MaxPlayers = 4,
                            MinAge = 8,
                            MinPlayers = 2,
                            Name = "Scrabble",
                            Publisher = "Hasbro",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 2,
                            AvgPlayTime = 30,
                            MaxPlayers = 2,
                            MinAge = 6,
                            MinPlayers = 2,
                            Name = "Chess",
                            Publisher = "None",
                            Type = "Strategy"
                        },
                        new
                        {
                            GameId = 3,
                            AvgPlayTime = 200,
                            MaxPlayers = 10,
                            MinAge = 8,
                            MinPlayers = 2,
                            Name = "Monopoly",
                            Publisher = "Hasbro",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 4,
                            AvgPlayTime = 80,
                            MaxPlayers = 6,
                            MinAge = 8,
                            MinPlayers = 2,
                            Name = "Trivial Pursuit",
                            Publisher = "Hasbro",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 5,
                            AvgPlayTime = 60,
                            MaxPlayers = 2,
                            MinAge = 2,
                            MinPlayers = 2,
                            Name = "Backgammon",
                            Publisher = "None",
                            Type = "Strategy"
                        },
                        new
                        {
                            GameId = 6,
                            AvgPlayTime = 10,
                            MaxPlayers = 15,
                            MinAge = 6,
                            MinPlayers = 1,
                            Name = "Jenga",
                            Publisher = "Hasbro",
                            Type = "Physical Skill"
                        },
                        new
                        {
                            GameId = 7,
                            AvgPlayTime = 10,
                            MaxPlayers = 4,
                            MinAge = 6,
                            MinPlayers = 4,
                            Name = "Twister",
                            Publisher = "Milton Bradley",
                            Type = "Physical Skill"
                        },
                        new
                        {
                            GameId = 8,
                            AvgPlayTime = 120,
                            MaxPlayers = 5,
                            MinAge = 8,
                            MinPlayers = 2,
                            Name = "Ticket to Ride",
                            Publisher = "Days of Wonder",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 9,
                            AvgPlayTime = 10,
                            MaxPlayers = 5,
                            MinAge = 6,
                            MinPlayers = 1,
                            Name = "Operation",
                            Publisher = "Hasbro",
                            Type = "Physical Skill"
                        },
                        new
                        {
                            GameId = 10,
                            AvgPlayTime = 360,
                            MaxPlayers = 6,
                            MinAge = 6,
                            MinPlayers = 2,
                            Name = "Risk",
                            Publisher = "Hasbro",
                            Type = "Strategy"
                        },
                        new
                        {
                            GameId = 11,
                            AvgPlayTime = 120,
                            MaxPlayers = 6,
                            MinAge = 14,
                            MinPlayers = 1,
                            Name = "Zombicide",
                            Publisher = "Guillotine Games",
                            Type = "Strategy"
                        },
                        new
                        {
                            GameId = 12,
                            AvgPlayTime = 120,
                            MaxPlayers = 5,
                            MinAge = 14,
                            MinPlayers = 1,
                            Name = "Sythe",
                            Publisher = "Stonemeier Games",
                            Type = "Strategy"
                        },
                        new
                        {
                            GameId = 13,
                            AvgPlayTime = 120,
                            MaxPlayers = 6,
                            MinAge = 12,
                            MinPlayers = 1,
                            Name = "Rummy",
                            Publisher = "None",
                            Type = "Card"
                        },
                        new
                        {
                            GameId = 14,
                            AvgPlayTime = 60,
                            MaxPlayers = 6,
                            MinAge = 7,
                            MinPlayers = 2,
                            Name = "Phase 10",
                            Publisher = "Mattel",
                            Type = "Card"
                        },
                        new
                        {
                            GameId = 15,
                            AvgPlayTime = 360,
                            MaxPlayers = 10,
                            MinAge = 12,
                            MinPlayers = 3,
                            Name = "Dungeons & Dragons",
                            Publisher = "Wizards of the Coast",
                            Type = "RPG"
                        },
                        new
                        {
                            GameId = 16,
                            AvgPlayTime = 60,
                            MaxPlayers = 5,
                            MinAge = 12,
                            MinPlayers = 2,
                            Name = "Magic the Gathering",
                            Publisher = "Wizards of the Coast",
                            Type = "Card"
                        },
                        new
                        {
                            GameId = 17,
                            AvgPlayTime = 60,
                            MaxPlayers = 10,
                            MinAge = 12,
                            MinPlayers = 4,
                            Name = "Apples to Apples",
                            Publisher = "Mattel",
                            Type = "Card"
                        },
                        new
                        {
                            GameId = 18,
                            AvgPlayTime = 60,
                            MaxPlayers = 6,
                            MinAge = 12,
                            MinPlayers = 3,
                            Name = "Betrayal at House on the Hill",
                            Publisher = "Avalon Hill Games, Inc",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 19,
                            AvgPlayTime = 90,
                            MaxPlayers = 8,
                            MinAge = 13,
                            MinPlayers = 1,
                            Name = "Elder Sign",
                            Publisher = "Fantasy Fight Games",
                            Type = "Board"
                        },
                        new
                        {
                            GameId = 20,
                            AvgPlayTime = 60000,
                            MaxPlayers = 8,
                            MinAge = 17,
                            MinPlayers = 1,
                            Name = "Skyrim",
                            Publisher = "Bethesda Softworks",
                            Type = "Video"
                        },
                        new
                        {
                            GameId = 21,
                            AvgPlayTime = 120,
                            MaxPlayers = 4,
                            MinAge = 12,
                            MinPlayers = 1,
                            Name = "Giant Killer Robots",
                            Publisher = "Weta Workshop",
                            Type = "Tabletop"
                        });
                });

            modelBuilder.Entity("GameFinder.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Token");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GameFinder.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GameFinder.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameFinder.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GameFinder.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
